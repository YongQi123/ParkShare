/**
 */
package torch.nn.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import torch.nn.util.NewPackage1AdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class NewPackage1ItemProviderAdapterFactory extends NewPackage1AdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NewPackage1ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleItemProvider moduleItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleAdapter() {
		if (moduleItemProvider == null) {
			moduleItemProvider = new ModuleItemProvider(this);
		}

		return moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._ConvNd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _ConvNdItemProvider _ConvNdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._ConvNd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_ConvNdAdapter() {
		if (_ConvNdItemProvider == null) {
			_ConvNdItemProvider = new _ConvNdItemProvider(this);
		}

		return _ConvNdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Conv1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Conv1dItemProvider conv1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Conv1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConv1dAdapter() {
		if (conv1dItemProvider == null) {
			conv1dItemProvider = new Conv1dItemProvider(this);
		}

		return conv1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Conv2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Conv2dItemProvider conv2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Conv2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConv2dAdapter() {
		if (conv2dItemProvider == null) {
			conv2dItemProvider = new Conv2dItemProvider(this);
		}

		return conv2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Conv3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Conv3dItemProvider conv3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Conv3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConv3dAdapter() {
		if (conv3dItemProvider == null) {
			conv3dItemProvider = new Conv3dItemProvider(this);
		}

		return conv3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._MaxPoolNd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _MaxPoolNdItemProvider _MaxPoolNdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._MaxPoolNd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_MaxPoolNdAdapter() {
		if (_MaxPoolNdItemProvider == null) {
			_MaxPoolNdItemProvider = new _MaxPoolNdItemProvider(this);
		}

		return _MaxPoolNdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._AvgPoolNd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _AvgPoolNdItemProvider _AvgPoolNdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._AvgPoolNd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_AvgPoolNdAdapter() {
		if (_AvgPoolNdItemProvider == null) {
			_AvgPoolNdItemProvider = new _AvgPoolNdItemProvider(this);
		}

		return _AvgPoolNdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Sequential} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequentialItemProvider sequentialItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Sequential}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequentialAdapter() {
		if (sequentialItemProvider == null) {
			sequentialItemProvider = new SequentialItemProvider(this);
		}

		return sequentialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ModuleList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleListItemProvider moduleListItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ModuleList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleListAdapter() {
		if (moduleListItemProvider == null) {
			moduleListItemProvider = new ModuleListItemProvider(this);
		}

		return moduleListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ModuleDict} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleDictItemProvider moduleDictItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ModuleDict}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleDictAdapter() {
		if (moduleDictItemProvider == null) {
			moduleDictItemProvider = new ModuleDictItemProvider(this);
		}

		return moduleDictItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ParameterList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterListItemProvider parameterListItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ParameterList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterListAdapter() {
		if (parameterListItemProvider == null) {
			parameterListItemProvider = new ParameterListItemProvider(this);
		}

		return parameterListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ParameterDIct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterDIctItemProvider parameterDIctItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ParameterDIct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterDIctAdapter() {
		if (parameterDIctItemProvider == null) {
			parameterDIctItemProvider = new ParameterDIctItemProvider(this);
		}

		return parameterDIctItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._ConvTransposeNd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _ConvTransposeNdItemProvider _ConvTransposeNdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._ConvTransposeNd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_ConvTransposeNdAdapter() {
		if (_ConvTransposeNdItemProvider == null) {
			_ConvTransposeNdItemProvider = new _ConvTransposeNdItemProvider(this);
		}

		return _ConvTransposeNdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ConvTranspose1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConvTranspose1dItemProvider convTranspose1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ConvTranspose1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConvTranspose1dAdapter() {
		if (convTranspose1dItemProvider == null) {
			convTranspose1dItemProvider = new ConvTranspose1dItemProvider(this);
		}

		return convTranspose1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ConvTranspose2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConvTranspose2dItemProvider convTranspose2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ConvTranspose2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConvTranspose2dAdapter() {
		if (convTranspose2dItemProvider == null) {
			convTranspose2dItemProvider = new ConvTranspose2dItemProvider(this);
		}

		return convTranspose2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ConvTranspose3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConvTranspose3dItemProvider convTranspose3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ConvTranspose3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConvTranspose3dAdapter() {
		if (convTranspose3dItemProvider == null) {
			convTranspose3dItemProvider = new ConvTranspose3dItemProvider(this);
		}

		return convTranspose3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LazyConv1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LazyConv1dItemProvider lazyConv1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LazyConv1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLazyConv1dAdapter() {
		if (lazyConv1dItemProvider == null) {
			lazyConv1dItemProvider = new LazyConv1dItemProvider(this);
		}

		return lazyConv1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LazyConv2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LazyConv2dItemProvider lazyConv2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LazyConv2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLazyConv2dAdapter() {
		if (lazyConv2dItemProvider == null) {
			lazyConv2dItemProvider = new LazyConv2dItemProvider(this);
		}

		return lazyConv2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LazyConv3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LazyConv3dItemProvider lazyConv3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LazyConv3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLazyConv3dAdapter() {
		if (lazyConv3dItemProvider == null) {
			lazyConv3dItemProvider = new LazyConv3dItemProvider(this);
		}

		return lazyConv3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LazyConvTranspose1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LazyConvTranspose1dItemProvider lazyConvTranspose1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LazyConvTranspose1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLazyConvTranspose1dAdapter() {
		if (lazyConvTranspose1dItemProvider == null) {
			lazyConvTranspose1dItemProvider = new LazyConvTranspose1dItemProvider(this);
		}

		return lazyConvTranspose1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LazyConvTranspose2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LazyConvTranspose2dItemProvider lazyConvTranspose2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LazyConvTranspose2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLazyConvTranspose2dAdapter() {
		if (lazyConvTranspose2dItemProvider == null) {
			lazyConvTranspose2dItemProvider = new LazyConvTranspose2dItemProvider(this);
		}

		return lazyConvTranspose2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LazyConvTranspose3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LazyConvTranspose3dItemProvider lazyConvTranspose3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LazyConvTranspose3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLazyConvTranspose3dAdapter() {
		if (lazyConvTranspose3dItemProvider == null) {
			lazyConvTranspose3dItemProvider = new LazyConvTranspose3dItemProvider(this);
		}

		return lazyConvTranspose3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.MaxPool1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxPool1dItemProvider maxPool1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.MaxPool1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxPool1dAdapter() {
		if (maxPool1dItemProvider == null) {
			maxPool1dItemProvider = new MaxPool1dItemProvider(this);
		}

		return maxPool1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.MaxPool2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxPool2dItemProvider maxPool2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.MaxPool2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxPool2dAdapter() {
		if (maxPool2dItemProvider == null) {
			maxPool2dItemProvider = new MaxPool2dItemProvider(this);
		}

		return maxPool2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.MaxPool3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxPool3dItemProvider maxPool3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.MaxPool3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxPool3dAdapter() {
		if (maxPool3dItemProvider == null) {
			maxPool3dItemProvider = new MaxPool3dItemProvider(this);
		}

		return maxPool3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._MaxUnpoolNd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _MaxUnpoolNdItemProvider _MaxUnpoolNdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._MaxUnpoolNd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_MaxUnpoolNdAdapter() {
		if (_MaxUnpoolNdItemProvider == null) {
			_MaxUnpoolNdItemProvider = new _MaxUnpoolNdItemProvider(this);
		}

		return _MaxUnpoolNdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.MaxUnpool1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxUnpool1dItemProvider maxUnpool1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.MaxUnpool1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxUnpool1dAdapter() {
		if (maxUnpool1dItemProvider == null) {
			maxUnpool1dItemProvider = new MaxUnpool1dItemProvider(this);
		}

		return maxUnpool1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.MaxUnpool2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxUnpool2dItemProvider maxUnpool2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.MaxUnpool2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxUnpool2dAdapter() {
		if (maxUnpool2dItemProvider == null) {
			maxUnpool2dItemProvider = new MaxUnpool2dItemProvider(this);
		}

		return maxUnpool2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.MaxUnpool3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxUnpool3dItemProvider maxUnpool3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.MaxUnpool3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxUnpool3dAdapter() {
		if (maxUnpool3dItemProvider == null) {
			maxUnpool3dItemProvider = new MaxUnpool3dItemProvider(this);
		}

		return maxUnpool3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.AvgPool1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvgPool1dItemProvider avgPool1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.AvgPool1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvgPool1dAdapter() {
		if (avgPool1dItemProvider == null) {
			avgPool1dItemProvider = new AvgPool1dItemProvider(this);
		}

		return avgPool1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.AvgPool2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvgPool2dItemProvider avgPool2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.AvgPool2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvgPool2dAdapter() {
		if (avgPool2dItemProvider == null) {
			avgPool2dItemProvider = new AvgPool2dItemProvider(this);
		}

		return avgPool2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.AvgPool3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvgPool3dItemProvider avgPool3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.AvgPool3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvgPool3dAdapter() {
		if (avgPool3dItemProvider == null) {
			avgPool3dItemProvider = new AvgPool3dItemProvider(this);
		}

		return avgPool3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.FractionalMaxPool2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FractionalMaxPool2dItemProvider fractionalMaxPool2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.FractionalMaxPool2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFractionalMaxPool2dAdapter() {
		if (fractionalMaxPool2dItemProvider == null) {
			fractionalMaxPool2dItemProvider = new FractionalMaxPool2dItemProvider(this);
		}

		return fractionalMaxPool2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.FractionalMaxPool3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FractionalMaxPool3dItemProvider fractionalMaxPool3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.FractionalMaxPool3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFractionalMaxPool3dAdapter() {
		if (fractionalMaxPool3dItemProvider == null) {
			fractionalMaxPool3dItemProvider = new FractionalMaxPool3dItemProvider(this);
		}

		return fractionalMaxPool3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._LPPoolNd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _LPPoolNdItemProvider _LPPoolNdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._LPPoolNd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_LPPoolNdAdapter() {
		if (_LPPoolNdItemProvider == null) {
			_LPPoolNdItemProvider = new _LPPoolNdItemProvider(this);
		}

		return _LPPoolNdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LPPool1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPPool1dItemProvider lpPool1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LPPool1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPPool1dAdapter() {
		if (lpPool1dItemProvider == null) {
			lpPool1dItemProvider = new LPPool1dItemProvider(this);
		}

		return lpPool1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LPPool2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPPool2dItemProvider lpPool2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LPPool2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPPool2dAdapter() {
		if (lpPool2dItemProvider == null) {
			lpPool2dItemProvider = new LPPool2dItemProvider(this);
		}

		return lpPool2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._AdaptiveMaxPoolNd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _AdaptiveMaxPoolNdItemProvider _AdaptiveMaxPoolNdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._AdaptiveMaxPoolNd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_AdaptiveMaxPoolNdAdapter() {
		if (_AdaptiveMaxPoolNdItemProvider == null) {
			_AdaptiveMaxPoolNdItemProvider = new _AdaptiveMaxPoolNdItemProvider(this);
		}

		return _AdaptiveMaxPoolNdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.AdaptiveMaxPool1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdaptiveMaxPool1dItemProvider adaptiveMaxPool1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.AdaptiveMaxPool1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdaptiveMaxPool1dAdapter() {
		if (adaptiveMaxPool1dItemProvider == null) {
			adaptiveMaxPool1dItemProvider = new AdaptiveMaxPool1dItemProvider(this);
		}

		return adaptiveMaxPool1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.AdaptiveMaxPool2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdaptiveMaxPool2dItemProvider adaptiveMaxPool2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.AdaptiveMaxPool2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdaptiveMaxPool2dAdapter() {
		if (adaptiveMaxPool2dItemProvider == null) {
			adaptiveMaxPool2dItemProvider = new AdaptiveMaxPool2dItemProvider(this);
		}

		return adaptiveMaxPool2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.AdaptiveMaxPool3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdaptiveMaxPool3dItemProvider adaptiveMaxPool3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.AdaptiveMaxPool3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdaptiveMaxPool3dAdapter() {
		if (adaptiveMaxPool3dItemProvider == null) {
			adaptiveMaxPool3dItemProvider = new AdaptiveMaxPool3dItemProvider(this);
		}

		return adaptiveMaxPool3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._AdaptiveAvgPoolNd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _AdaptiveAvgPoolNdItemProvider _AdaptiveAvgPoolNdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._AdaptiveAvgPoolNd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_AdaptiveAvgPoolNdAdapter() {
		if (_AdaptiveAvgPoolNdItemProvider == null) {
			_AdaptiveAvgPoolNdItemProvider = new _AdaptiveAvgPoolNdItemProvider(this);
		}

		return _AdaptiveAvgPoolNdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.AdaptiveAvgPool1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdaptiveAvgPool1dItemProvider adaptiveAvgPool1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.AdaptiveAvgPool1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdaptiveAvgPool1dAdapter() {
		if (adaptiveAvgPool1dItemProvider == null) {
			adaptiveAvgPool1dItemProvider = new AdaptiveAvgPool1dItemProvider(this);
		}

		return adaptiveAvgPool1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.AdaptiveAvgPool2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdaptiveAvgPool2dItemProvider adaptiveAvgPool2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.AdaptiveAvgPool2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdaptiveAvgPool2dAdapter() {
		if (adaptiveAvgPool2dItemProvider == null) {
			adaptiveAvgPool2dItemProvider = new AdaptiveAvgPool2dItemProvider(this);
		}

		return adaptiveAvgPool2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.AdaptiveAvgPool3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdaptiveAvgPool3dItemProvider adaptiveAvgPool3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.AdaptiveAvgPool3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdaptiveAvgPool3dAdapter() {
		if (adaptiveAvgPool3dItemProvider == null) {
			adaptiveAvgPool3dItemProvider = new AdaptiveAvgPool3dItemProvider(this);
		}

		return adaptiveAvgPool3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._ConstantPadNd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _ConstantPadNdItemProvider _ConstantPadNdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._ConstantPadNd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_ConstantPadNdAdapter() {
		if (_ConstantPadNdItemProvider == null) {
			_ConstantPadNdItemProvider = new _ConstantPadNdItemProvider(this);
		}

		return _ConstantPadNdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ConstantPad1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantPad1dItemProvider constantPad1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ConstantPad1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantPad1dAdapter() {
		if (constantPad1dItemProvider == null) {
			constantPad1dItemProvider = new ConstantPad1dItemProvider(this);
		}

		return constantPad1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ConstantPad2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantPad2dItemProvider constantPad2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ConstantPad2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantPad2dAdapter() {
		if (constantPad2dItemProvider == null) {
			constantPad2dItemProvider = new ConstantPad2dItemProvider(this);
		}

		return constantPad2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ConstantPad3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantPad3dItemProvider constantPad3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ConstantPad3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantPad3dAdapter() {
		if (constantPad3dItemProvider == null) {
			constantPad3dItemProvider = new ConstantPad3dItemProvider(this);
		}

		return constantPad3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._ReflectionPadNd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _ReflectionPadNdItemProvider _ReflectionPadNdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._ReflectionPadNd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_ReflectionPadNdAdapter() {
		if (_ReflectionPadNdItemProvider == null) {
			_ReflectionPadNdItemProvider = new _ReflectionPadNdItemProvider(this);
		}

		return _ReflectionPadNdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ReflectionPad1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReflectionPad1dItemProvider reflectionPad1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ReflectionPad1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReflectionPad1dAdapter() {
		if (reflectionPad1dItemProvider == null) {
			reflectionPad1dItemProvider = new ReflectionPad1dItemProvider(this);
		}

		return reflectionPad1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ReflectionPad2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReflectionPad2dItemProvider reflectionPad2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ReflectionPad2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReflectionPad2dAdapter() {
		if (reflectionPad2dItemProvider == null) {
			reflectionPad2dItemProvider = new ReflectionPad2dItemProvider(this);
		}

		return reflectionPad2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ReflectionPad3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReflectionPad3dItemProvider reflectionPad3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ReflectionPad3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReflectionPad3dAdapter() {
		if (reflectionPad3dItemProvider == null) {
			reflectionPad3dItemProvider = new ReflectionPad3dItemProvider(this);
		}

		return reflectionPad3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._ReplicationPadNd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _ReplicationPadNdItemProvider _ReplicationPadNdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._ReplicationPadNd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_ReplicationPadNdAdapter() {
		if (_ReplicationPadNdItemProvider == null) {
			_ReplicationPadNdItemProvider = new _ReplicationPadNdItemProvider(this);
		}

		return _ReplicationPadNdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ReplicationPad1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplicationPad1dItemProvider replicationPad1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ReplicationPad1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplicationPad1dAdapter() {
		if (replicationPad1dItemProvider == null) {
			replicationPad1dItemProvider = new ReplicationPad1dItemProvider(this);
		}

		return replicationPad1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ReplicationPad2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplicationPad2dItemProvider replicationPad2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ReplicationPad2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplicationPad2dAdapter() {
		if (replicationPad2dItemProvider == null) {
			replicationPad2dItemProvider = new ReplicationPad2dItemProvider(this);
		}

		return replicationPad2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ReplicationPad3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplicationPad3dItemProvider replicationPad3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ReplicationPad3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplicationPad3dAdapter() {
		if (replicationPad3dItemProvider == null) {
			replicationPad3dItemProvider = new ReplicationPad3dItemProvider(this);
		}

		return replicationPad3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ZeroPad2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ZeroPad2dItemProvider zeroPad2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ZeroPad2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createZeroPad2dAdapter() {
		if (zeroPad2dItemProvider == null) {
			zeroPad2dItemProvider = new ZeroPad2dItemProvider(this);
		}

		return zeroPad2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Threshold} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThresholdItemProvider thresholdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Threshold}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThresholdAdapter() {
		if (thresholdItemProvider == null) {
			thresholdItemProvider = new ThresholdItemProvider(this);
		}

		return thresholdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ReLU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReLUItemProvider reLUItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ReLU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReLUAdapter() {
		if (reLUItemProvider == null) {
			reLUItemProvider = new ReLUItemProvider(this);
		}

		return reLUItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.RReLU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RReLUItemProvider rReLUItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.RReLU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRReLUAdapter() {
		if (rReLUItemProvider == null) {
			rReLUItemProvider = new RReLUItemProvider(this);
		}

		return rReLUItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Hardtanh} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HardtanhItemProvider hardtanhItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Hardtanh}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHardtanhAdapter() {
		if (hardtanhItemProvider == null) {
			hardtanhItemProvider = new HardtanhItemProvider(this);
		}

		return hardtanhItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ReLU6} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReLU6ItemProvider reLU6ItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ReLU6}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReLU6Adapter() {
		if (reLU6ItemProvider == null) {
			reLU6ItemProvider = new ReLU6ItemProvider(this);
		}

		return reLU6ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Sigmoid} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SigmoidItemProvider sigmoidItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Sigmoid}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSigmoidAdapter() {
		if (sigmoidItemProvider == null) {
			sigmoidItemProvider = new SigmoidItemProvider(this);
		}

		return sigmoidItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Hardsigmoid} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HardsigmoidItemProvider hardsigmoidItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Hardsigmoid}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHardsigmoidAdapter() {
		if (hardsigmoidItemProvider == null) {
			hardsigmoidItemProvider = new HardsigmoidItemProvider(this);
		}

		return hardsigmoidItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Tanh} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TanhItemProvider tanhItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Tanh}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTanhAdapter() {
		if (tanhItemProvider == null) {
			tanhItemProvider = new TanhItemProvider(this);
		}

		return tanhItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.SiLU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SiLUItemProvider siLUItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.SiLU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSiLUAdapter() {
		if (siLUItemProvider == null) {
			siLUItemProvider = new SiLUItemProvider(this);
		}

		return siLUItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Mish} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MishItemProvider mishItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Mish}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMishAdapter() {
		if (mishItemProvider == null) {
			mishItemProvider = new MishItemProvider(this);
		}

		return mishItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Hardswish} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HardswishItemProvider hardswishItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Hardswish}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHardswishAdapter() {
		if (hardswishItemProvider == null) {
			hardswishItemProvider = new HardswishItemProvider(this);
		}

		return hardswishItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.ELU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ELUItemProvider eluItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.ELU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createELUAdapter() {
		if (eluItemProvider == null) {
			eluItemProvider = new ELUItemProvider(this);
		}

		return eluItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.CELU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CELUItemProvider celuItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.CELU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCELUAdapter() {
		if (celuItemProvider == null) {
			celuItemProvider = new CELUItemProvider(this);
		}

		return celuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.SELU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SELUItemProvider seluItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.SELU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSELUAdapter() {
		if (seluItemProvider == null) {
			seluItemProvider = new SELUItemProvider(this);
		}

		return seluItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.GLU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GLUItemProvider gluItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.GLU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGLUAdapter() {
		if (gluItemProvider == null) {
			gluItemProvider = new GLUItemProvider(this);
		}

		return gluItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.GELU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GELUItemProvider geluItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.GELU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGELUAdapter() {
		if (geluItemProvider == null) {
			geluItemProvider = new GELUItemProvider(this);
		}

		return geluItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Hardshrink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HardshrinkItemProvider hardshrinkItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Hardshrink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHardshrinkAdapter() {
		if (hardshrinkItemProvider == null) {
			hardshrinkItemProvider = new HardshrinkItemProvider(this);
		}

		return hardshrinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LeakyReLU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeakyReLUItemProvider leakyReLUItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LeakyReLU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeakyReLUAdapter() {
		if (leakyReLUItemProvider == null) {
			leakyReLUItemProvider = new LeakyReLUItemProvider(this);
		}

		return leakyReLUItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LogSigmoid} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogSigmoidItemProvider logSigmoidItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LogSigmoid}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogSigmoidAdapter() {
		if (logSigmoidItemProvider == null) {
			logSigmoidItemProvider = new LogSigmoidItemProvider(this);
		}

		return logSigmoidItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Softplus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftplusItemProvider softplusItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Softplus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftplusAdapter() {
		if (softplusItemProvider == null) {
			softplusItemProvider = new SoftplusItemProvider(this);
		}

		return softplusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Softshrink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftshrinkItemProvider softshrinkItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Softshrink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftshrinkAdapter() {
		if (softshrinkItemProvider == null) {
			softshrinkItemProvider = new SoftshrinkItemProvider(this);
		}

		return softshrinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.MultiheadAttention} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiheadAttentionItemProvider multiheadAttentionItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.MultiheadAttention}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiheadAttentionAdapter() {
		if (multiheadAttentionItemProvider == null) {
			multiheadAttentionItemProvider = new MultiheadAttentionItemProvider(this);
		}

		return multiheadAttentionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.PReLU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PReLUItemProvider pReLUItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.PReLU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPReLUAdapter() {
		if (pReLUItemProvider == null) {
			pReLUItemProvider = new PReLUItemProvider(this);
		}

		return pReLUItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Softsign} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftsignItemProvider softsignItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Softsign}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftsignAdapter() {
		if (softsignItemProvider == null) {
			softsignItemProvider = new SoftsignItemProvider(this);
		}

		return softsignItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Tanhshrink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TanhshrinkItemProvider tanhshrinkItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Tanhshrink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTanhshrinkAdapter() {
		if (tanhshrinkItemProvider == null) {
			tanhshrinkItemProvider = new TanhshrinkItemProvider(this);
		}

		return tanhshrinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Softmin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftminItemProvider softminItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Softmin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftminAdapter() {
		if (softminItemProvider == null) {
			softminItemProvider = new SoftminItemProvider(this);
		}

		return softminItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Softmax} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftmaxItemProvider softmaxItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Softmax}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftmaxAdapter() {
		if (softmaxItemProvider == null) {
			softmaxItemProvider = new SoftmaxItemProvider(this);
		}

		return softmaxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.Softmax2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Softmax2dItemProvider softmax2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.Softmax2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftmax2dAdapter() {
		if (softmax2dItemProvider == null) {
			softmax2dItemProvider = new Softmax2dItemProvider(this);
		}

		return softmax2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LogSoftmax} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogSoftmaxItemProvider logSoftmaxItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LogSoftmax}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogSoftmaxAdapter() {
		if (logSoftmaxItemProvider == null) {
			logSoftmaxItemProvider = new LogSoftmaxItemProvider(this);
		}

		return logSoftmaxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._NormBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _NormBaseItemProvider _NormBaseItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._NormBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_NormBaseAdapter() {
		if (_NormBaseItemProvider == null) {
			_NormBaseItemProvider = new _NormBaseItemProvider(this);
		}

		return _NormBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._BatchNorm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _BatchNormItemProvider _BatchNormItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._BatchNorm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_BatchNormAdapter() {
		if (_BatchNormItemProvider == null) {
			_BatchNormItemProvider = new _BatchNormItemProvider(this);
		}

		return _BatchNormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._LazyNormBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _LazyNormBaseItemProvider _LazyNormBaseItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._LazyNormBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_LazyNormBaseAdapter() {
		if (_LazyNormBaseItemProvider == null) {
			_LazyNormBaseItemProvider = new _LazyNormBaseItemProvider(this);
		}

		return _LazyNormBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.BatchNorm1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BatchNorm1dItemProvider batchNorm1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.BatchNorm1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBatchNorm1dAdapter() {
		if (batchNorm1dItemProvider == null) {
			batchNorm1dItemProvider = new BatchNorm1dItemProvider(this);
		}

		return batchNorm1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LazyBatchNorm1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LazyBatchNorm1dItemProvider lazyBatchNorm1dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LazyBatchNorm1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLazyBatchNorm1dAdapter() {
		if (lazyBatchNorm1dItemProvider == null) {
			lazyBatchNorm1dItemProvider = new LazyBatchNorm1dItemProvider(this);
		}

		return lazyBatchNorm1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.BatchNorm2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BatchNorm2dItemProvider batchNorm2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.BatchNorm2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBatchNorm2dAdapter() {
		if (batchNorm2dItemProvider == null) {
			batchNorm2dItemProvider = new BatchNorm2dItemProvider(this);
		}

		return batchNorm2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LazyBatchNorm2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LazyBatchNorm2dItemProvider lazyBatchNorm2dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LazyBatchNorm2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLazyBatchNorm2dAdapter() {
		if (lazyBatchNorm2dItemProvider == null) {
			lazyBatchNorm2dItemProvider = new LazyBatchNorm2dItemProvider(this);
		}

		return lazyBatchNorm2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.BatchNorm3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BatchNorm3dItemProvider batchNorm3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.BatchNorm3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBatchNorm3dAdapter() {
		if (batchNorm3dItemProvider == null) {
			batchNorm3dItemProvider = new BatchNorm3dItemProvider(this);
		}

		return batchNorm3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LazyBatchNorm3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LazyBatchNorm3dItemProvider lazyBatchNorm3dItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LazyBatchNorm3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLazyBatchNorm3dAdapter() {
		if (lazyBatchNorm3dItemProvider == null) {
			lazyBatchNorm3dItemProvider = new LazyBatchNorm3dItemProvider(this);
		}

		return lazyBatchNorm3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.SyncBatchNorm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SyncBatchNormItemProvider syncBatchNormItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.SyncBatchNorm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSyncBatchNormAdapter() {
		if (syncBatchNormItemProvider == null) {
			syncBatchNormItemProvider = new SyncBatchNormItemProvider(this);
		}

		return syncBatchNormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.RNNBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RNNBaseItemProvider rnnBaseItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.RNNBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRNNBaseAdapter() {
		if (rnnBaseItemProvider == null) {
			rnnBaseItemProvider = new RNNBaseItemProvider(this);
		}

		return rnnBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn._LazyConvXdMixin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _LazyConvXdMixinItemProvider _LazyConvXdMixinItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn._LazyConvXdMixin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_LazyConvXdMixinAdapter() {
		if (_LazyConvXdMixinItemProvider == null) {
			_LazyConvXdMixinItemProvider = new _LazyConvXdMixinItemProvider(this);
		}

		return _LazyConvXdMixinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LazyModuleMixin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LazyModuleMixinItemProvider lazyModuleMixinItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LazyModuleMixin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLazyModuleMixinAdapter() {
		if (lazyModuleMixinItemProvider == null) {
			lazyModuleMixinItemProvider = new LazyModuleMixinItemProvider(this);
		}

		return lazyModuleMixinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.RNN} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RNNItemProvider rnnItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.RNN}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRNNAdapter() {
		if (rnnItemProvider == null) {
			rnnItemProvider = new RNNItemProvider(this);
		}

		return rnnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LSTM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LSTMItemProvider lstmItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LSTM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLSTMAdapter() {
		if (lstmItemProvider == null) {
			lstmItemProvider = new LSTMItemProvider(this);
		}

		return lstmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.GRU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GRUItemProvider gruItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.GRU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGRUAdapter() {
		if (gruItemProvider == null) {
			gruItemProvider = new GRUItemProvider(this);
		}

		return gruItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.RNNCellBase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RNNCellBaseItemProvider rnnCellBaseItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.RNNCellBase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRNNCellBaseAdapter() {
		if (rnnCellBaseItemProvider == null) {
			rnnCellBaseItemProvider = new RNNCellBaseItemProvider(this);
		}

		return rnnCellBaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.RNNCell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RNNCellItemProvider rnnCellItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.RNNCell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRNNCellAdapter() {
		if (rnnCellItemProvider == null) {
			rnnCellItemProvider = new RNNCellItemProvider(this);
		}

		return rnnCellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.LSTMCell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LSTMCellItemProvider lstmCellItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.LSTMCell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLSTMCellAdapter() {
		if (lstmCellItemProvider == null) {
			lstmCellItemProvider = new LSTMCellItemProvider(this);
		}

		return lstmCellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.nn.GRUCell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GRUCellItemProvider gruCellItemProvider;

	/**
	 * This creates an adapter for a {@link torch.nn.GRUCell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGRUCellAdapter() {
		if (gruCellItemProvider == null) {
			gruCellItemProvider = new GRUCellItemProvider(this);
		}

		return gruCellItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (moduleItemProvider != null)
			moduleItemProvider.dispose();
		if (_ConvNdItemProvider != null)
			_ConvNdItemProvider.dispose();
		if (conv1dItemProvider != null)
			conv1dItemProvider.dispose();
		if (conv2dItemProvider != null)
			conv2dItemProvider.dispose();
		if (conv3dItemProvider != null)
			conv3dItemProvider.dispose();
		if (_MaxPoolNdItemProvider != null)
			_MaxPoolNdItemProvider.dispose();
		if (_AvgPoolNdItemProvider != null)
			_AvgPoolNdItemProvider.dispose();
		if (sequentialItemProvider != null)
			sequentialItemProvider.dispose();
		if (moduleListItemProvider != null)
			moduleListItemProvider.dispose();
		if (moduleDictItemProvider != null)
			moduleDictItemProvider.dispose();
		if (parameterListItemProvider != null)
			parameterListItemProvider.dispose();
		if (parameterDIctItemProvider != null)
			parameterDIctItemProvider.dispose();
		if (parameterItemProvider != null)
			parameterItemProvider.dispose();
		if (_ConvTransposeNdItemProvider != null)
			_ConvTransposeNdItemProvider.dispose();
		if (convTranspose1dItemProvider != null)
			convTranspose1dItemProvider.dispose();
		if (convTranspose2dItemProvider != null)
			convTranspose2dItemProvider.dispose();
		if (convTranspose3dItemProvider != null)
			convTranspose3dItemProvider.dispose();
		if (lazyConv1dItemProvider != null)
			lazyConv1dItemProvider.dispose();
		if (lazyConv2dItemProvider != null)
			lazyConv2dItemProvider.dispose();
		if (lazyConv3dItemProvider != null)
			lazyConv3dItemProvider.dispose();
		if (lazyConvTranspose1dItemProvider != null)
			lazyConvTranspose1dItemProvider.dispose();
		if (lazyConvTranspose2dItemProvider != null)
			lazyConvTranspose2dItemProvider.dispose();
		if (lazyConvTranspose3dItemProvider != null)
			lazyConvTranspose3dItemProvider.dispose();
		if (maxPool1dItemProvider != null)
			maxPool1dItemProvider.dispose();
		if (maxPool2dItemProvider != null)
			maxPool2dItemProvider.dispose();
		if (maxPool3dItemProvider != null)
			maxPool3dItemProvider.dispose();
		if (_MaxUnpoolNdItemProvider != null)
			_MaxUnpoolNdItemProvider.dispose();
		if (maxUnpool1dItemProvider != null)
			maxUnpool1dItemProvider.dispose();
		if (maxUnpool2dItemProvider != null)
			maxUnpool2dItemProvider.dispose();
		if (maxUnpool3dItemProvider != null)
			maxUnpool3dItemProvider.dispose();
		if (avgPool1dItemProvider != null)
			avgPool1dItemProvider.dispose();
		if (avgPool2dItemProvider != null)
			avgPool2dItemProvider.dispose();
		if (avgPool3dItemProvider != null)
			avgPool3dItemProvider.dispose();
		if (fractionalMaxPool2dItemProvider != null)
			fractionalMaxPool2dItemProvider.dispose();
		if (fractionalMaxPool3dItemProvider != null)
			fractionalMaxPool3dItemProvider.dispose();
		if (_LPPoolNdItemProvider != null)
			_LPPoolNdItemProvider.dispose();
		if (lpPool1dItemProvider != null)
			lpPool1dItemProvider.dispose();
		if (lpPool2dItemProvider != null)
			lpPool2dItemProvider.dispose();
		if (_AdaptiveMaxPoolNdItemProvider != null)
			_AdaptiveMaxPoolNdItemProvider.dispose();
		if (adaptiveMaxPool1dItemProvider != null)
			adaptiveMaxPool1dItemProvider.dispose();
		if (adaptiveMaxPool2dItemProvider != null)
			adaptiveMaxPool2dItemProvider.dispose();
		if (adaptiveMaxPool3dItemProvider != null)
			adaptiveMaxPool3dItemProvider.dispose();
		if (_AdaptiveAvgPoolNdItemProvider != null)
			_AdaptiveAvgPoolNdItemProvider.dispose();
		if (adaptiveAvgPool1dItemProvider != null)
			adaptiveAvgPool1dItemProvider.dispose();
		if (adaptiveAvgPool2dItemProvider != null)
			adaptiveAvgPool2dItemProvider.dispose();
		if (adaptiveAvgPool3dItemProvider != null)
			adaptiveAvgPool3dItemProvider.dispose();
		if (_ConstantPadNdItemProvider != null)
			_ConstantPadNdItemProvider.dispose();
		if (constantPad1dItemProvider != null)
			constantPad1dItemProvider.dispose();
		if (constantPad2dItemProvider != null)
			constantPad2dItemProvider.dispose();
		if (constantPad3dItemProvider != null)
			constantPad3dItemProvider.dispose();
		if (_ReflectionPadNdItemProvider != null)
			_ReflectionPadNdItemProvider.dispose();
		if (reflectionPad1dItemProvider != null)
			reflectionPad1dItemProvider.dispose();
		if (reflectionPad2dItemProvider != null)
			reflectionPad2dItemProvider.dispose();
		if (reflectionPad3dItemProvider != null)
			reflectionPad3dItemProvider.dispose();
		if (_ReplicationPadNdItemProvider != null)
			_ReplicationPadNdItemProvider.dispose();
		if (replicationPad1dItemProvider != null)
			replicationPad1dItemProvider.dispose();
		if (replicationPad2dItemProvider != null)
			replicationPad2dItemProvider.dispose();
		if (replicationPad3dItemProvider != null)
			replicationPad3dItemProvider.dispose();
		if (zeroPad2dItemProvider != null)
			zeroPad2dItemProvider.dispose();
		if (thresholdItemProvider != null)
			thresholdItemProvider.dispose();
		if (reLUItemProvider != null)
			reLUItemProvider.dispose();
		if (rReLUItemProvider != null)
			rReLUItemProvider.dispose();
		if (hardtanhItemProvider != null)
			hardtanhItemProvider.dispose();
		if (reLU6ItemProvider != null)
			reLU6ItemProvider.dispose();
		if (sigmoidItemProvider != null)
			sigmoidItemProvider.dispose();
		if (hardsigmoidItemProvider != null)
			hardsigmoidItemProvider.dispose();
		if (tanhItemProvider != null)
			tanhItemProvider.dispose();
		if (siLUItemProvider != null)
			siLUItemProvider.dispose();
		if (mishItemProvider != null)
			mishItemProvider.dispose();
		if (hardswishItemProvider != null)
			hardswishItemProvider.dispose();
		if (eluItemProvider != null)
			eluItemProvider.dispose();
		if (celuItemProvider != null)
			celuItemProvider.dispose();
		if (seluItemProvider != null)
			seluItemProvider.dispose();
		if (gluItemProvider != null)
			gluItemProvider.dispose();
		if (geluItemProvider != null)
			geluItemProvider.dispose();
		if (hardshrinkItemProvider != null)
			hardshrinkItemProvider.dispose();
		if (leakyReLUItemProvider != null)
			leakyReLUItemProvider.dispose();
		if (logSigmoidItemProvider != null)
			logSigmoidItemProvider.dispose();
		if (softplusItemProvider != null)
			softplusItemProvider.dispose();
		if (softshrinkItemProvider != null)
			softshrinkItemProvider.dispose();
		if (multiheadAttentionItemProvider != null)
			multiheadAttentionItemProvider.dispose();
		if (pReLUItemProvider != null)
			pReLUItemProvider.dispose();
		if (softsignItemProvider != null)
			softsignItemProvider.dispose();
		if (tanhshrinkItemProvider != null)
			tanhshrinkItemProvider.dispose();
		if (softminItemProvider != null)
			softminItemProvider.dispose();
		if (softmaxItemProvider != null)
			softmaxItemProvider.dispose();
		if (softmax2dItemProvider != null)
			softmax2dItemProvider.dispose();
		if (logSoftmaxItemProvider != null)
			logSoftmaxItemProvider.dispose();
		if (_NormBaseItemProvider != null)
			_NormBaseItemProvider.dispose();
		if (_BatchNormItemProvider != null)
			_BatchNormItemProvider.dispose();
		if (_LazyNormBaseItemProvider != null)
			_LazyNormBaseItemProvider.dispose();
		if (batchNorm1dItemProvider != null)
			batchNorm1dItemProvider.dispose();
		if (lazyBatchNorm1dItemProvider != null)
			lazyBatchNorm1dItemProvider.dispose();
		if (batchNorm2dItemProvider != null)
			batchNorm2dItemProvider.dispose();
		if (lazyBatchNorm2dItemProvider != null)
			lazyBatchNorm2dItemProvider.dispose();
		if (batchNorm3dItemProvider != null)
			batchNorm3dItemProvider.dispose();
		if (lazyBatchNorm3dItemProvider != null)
			lazyBatchNorm3dItemProvider.dispose();
		if (syncBatchNormItemProvider != null)
			syncBatchNormItemProvider.dispose();
		if (rnnBaseItemProvider != null)
			rnnBaseItemProvider.dispose();
		if (_LazyConvXdMixinItemProvider != null)
			_LazyConvXdMixinItemProvider.dispose();
		if (lazyModuleMixinItemProvider != null)
			lazyModuleMixinItemProvider.dispose();
		if (rnnItemProvider != null)
			rnnItemProvider.dispose();
		if (lstmItemProvider != null)
			lstmItemProvider.dispose();
		if (gruItemProvider != null)
			gruItemProvider.dispose();
		if (rnnCellBaseItemProvider != null)
			rnnCellBaseItemProvider.dispose();
		if (rnnCellItemProvider != null)
			rnnCellItemProvider.dispose();
		if (lstmCellItemProvider != null)
			lstmCellItemProvider.dispose();
		if (gruCellItemProvider != null)
			gruCellItemProvider.dispose();
	}

}
