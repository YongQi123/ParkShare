/**
 */
package torch.optim.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import torch.optim.util.NewPackage2AdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class NewPackage2ItemProviderAdapterFactory extends NewPackage2AdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NewPackage2ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.Optimizer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptimizerItemProvider optimizerItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.Optimizer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptimizerAdapter() {
		if (optimizerItemProvider == null) {
			optimizerItemProvider = new OptimizerItemProvider(this);
		}

		return optimizerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.Adadelta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdadeltaItemProvider adadeltaItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.Adadelta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdadeltaAdapter() {
		if (adadeltaItemProvider == null) {
			adadeltaItemProvider = new AdadeltaItemProvider(this);
		}

		return adadeltaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.Adagrad} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdagradItemProvider adagradItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.Adagrad}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdagradAdapter() {
		if (adagradItemProvider == null) {
			adagradItemProvider = new AdagradItemProvider(this);
		}

		return adagradItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.Adam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdamItemProvider adamItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.Adam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdamAdapter() {
		if (adamItemProvider == null) {
			adamItemProvider = new AdamItemProvider(this);
		}

		return adamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.AdamW} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdamWItemProvider adamWItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.AdamW}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdamWAdapter() {
		if (adamWItemProvider == null) {
			adamWItemProvider = new AdamWItemProvider(this);
		}

		return adamWItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.SparseAdam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SparseAdamItemProvider sparseAdamItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.SparseAdam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSparseAdamAdapter() {
		if (sparseAdamItemProvider == null) {
			sparseAdamItemProvider = new SparseAdamItemProvider(this);
		}

		return sparseAdamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.Adamax} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdamaxItemProvider adamaxItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.Adamax}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdamaxAdapter() {
		if (adamaxItemProvider == null) {
			adamaxItemProvider = new AdamaxItemProvider(this);
		}

		return adamaxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.ASGD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ASGDItemProvider asgdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.ASGD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createASGDAdapter() {
		if (asgdItemProvider == null) {
			asgdItemProvider = new ASGDItemProvider(this);
		}

		return asgdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.LBFGS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LBFGSItemProvider lbfgsItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.LBFGS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLBFGSAdapter() {
		if (lbfgsItemProvider == null) {
			lbfgsItemProvider = new LBFGSItemProvider(this);
		}

		return lbfgsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.NAdam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NAdamItemProvider nAdamItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.NAdam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNAdamAdapter() {
		if (nAdamItemProvider == null) {
			nAdamItemProvider = new NAdamItemProvider(this);
		}

		return nAdamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.RAdam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RAdamItemProvider rAdamItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.RAdam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRAdamAdapter() {
		if (rAdamItemProvider == null) {
			rAdamItemProvider = new RAdamItemProvider(this);
		}

		return rAdamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.RMSprop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RMSpropItemProvider rmSpropItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.RMSprop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRMSpropAdapter() {
		if (rmSpropItemProvider == null) {
			rmSpropItemProvider = new RMSpropItemProvider(this);
		}

		return rmSpropItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.Rprop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RpropItemProvider rpropItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.Rprop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRpropAdapter() {
		if (rpropItemProvider == null) {
			rpropItemProvider = new RpropItemProvider(this);
		}

		return rpropItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.SGD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SGDItemProvider sgdItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.SGD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSGDAdapter() {
		if (sgdItemProvider == null) {
			sgdItemProvider = new SGDItemProvider(this);
		}

		return sgdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim._LRScheduler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _LRSchedulerItemProvider _LRSchedulerItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim._LRScheduler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_LRSchedulerAdapter() {
		if (_LRSchedulerItemProvider == null) {
			_LRSchedulerItemProvider = new _LRSchedulerItemProvider(this);
		}

		return _LRSchedulerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.LambdaLR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LambdaLRItemProvider lambdaLRItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.LambdaLR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLambdaLRAdapter() {
		if (lambdaLRItemProvider == null) {
			lambdaLRItemProvider = new LambdaLRItemProvider(this);
		}

		return lambdaLRItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.MultiplicativeLR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiplicativeLRItemProvider multiplicativeLRItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.MultiplicativeLR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiplicativeLRAdapter() {
		if (multiplicativeLRItemProvider == null) {
			multiplicativeLRItemProvider = new MultiplicativeLRItemProvider(this);
		}

		return multiplicativeLRItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.StepLR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepLRItemProvider stepLRItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.StepLR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepLRAdapter() {
		if (stepLRItemProvider == null) {
			stepLRItemProvider = new StepLRItemProvider(this);
		}

		return stepLRItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.MultiStepLR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiStepLRItemProvider multiStepLRItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.MultiStepLR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiStepLRAdapter() {
		if (multiStepLRItemProvider == null) {
			multiStepLRItemProvider = new MultiStepLRItemProvider(this);
		}

		return multiStepLRItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.ConstantLR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantLRItemProvider constantLRItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.ConstantLR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantLRAdapter() {
		if (constantLRItemProvider == null) {
			constantLRItemProvider = new ConstantLRItemProvider(this);
		}

		return constantLRItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.LinearLR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinearLRItemProvider linearLRItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.LinearLR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinearLRAdapter() {
		if (linearLRItemProvider == null) {
			linearLRItemProvider = new LinearLRItemProvider(this);
		}

		return linearLRItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.ExponentialLR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExponentialLRItemProvider exponentialLRItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.ExponentialLR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExponentialLRAdapter() {
		if (exponentialLRItemProvider == null) {
			exponentialLRItemProvider = new ExponentialLRItemProvider(this);
		}

		return exponentialLRItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.SequentialLR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequentialLRItemProvider sequentialLRItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.SequentialLR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequentialLRAdapter() {
		if (sequentialLRItemProvider == null) {
			sequentialLRItemProvider = new SequentialLRItemProvider(this);
		}

		return sequentialLRItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.CosineAnnealingLR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CosineAnnealingLRItemProvider cosineAnnealingLRItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.CosineAnnealingLR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCosineAnnealingLRAdapter() {
		if (cosineAnnealingLRItemProvider == null) {
			cosineAnnealingLRItemProvider = new CosineAnnealingLRItemProvider(this);
		}

		return cosineAnnealingLRItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.ChainedScheduler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChainedSchedulerItemProvider chainedSchedulerItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.ChainedScheduler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChainedSchedulerAdapter() {
		if (chainedSchedulerItemProvider == null) {
			chainedSchedulerItemProvider = new ChainedSchedulerItemProvider(this);
		}

		return chainedSchedulerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.ReduceLROnPlateau} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReduceLROnPlateauItemProvider reduceLROnPlateauItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.ReduceLROnPlateau}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReduceLROnPlateauAdapter() {
		if (reduceLROnPlateauItemProvider == null) {
			reduceLROnPlateauItemProvider = new ReduceLROnPlateauItemProvider(this);
		}

		return reduceLROnPlateauItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.CyclicLR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CyclicLRItemProvider cyclicLRItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.CyclicLR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCyclicLRAdapter() {
		if (cyclicLRItemProvider == null) {
			cyclicLRItemProvider = new CyclicLRItemProvider(this);
		}

		return cyclicLRItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.CosineAnnealingWarmRestarts} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CosineAnnealingWarmRestartsItemProvider cosineAnnealingWarmRestartsItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.CosineAnnealingWarmRestarts}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCosineAnnealingWarmRestartsAdapter() {
		if (cosineAnnealingWarmRestartsItemProvider == null) {
			cosineAnnealingWarmRestartsItemProvider = new CosineAnnealingWarmRestartsItemProvider(this);
		}

		return cosineAnnealingWarmRestartsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.optim.OneCycleLR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OneCycleLRItemProvider oneCycleLRItemProvider;

	/**
	 * This creates an adapter for a {@link torch.optim.OneCycleLR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOneCycleLRAdapter() {
		if (oneCycleLRItemProvider == null) {
			oneCycleLRItemProvider = new OneCycleLRItemProvider(this);
		}

		return oneCycleLRItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (optimizerItemProvider != null)
			optimizerItemProvider.dispose();
		if (adadeltaItemProvider != null)
			adadeltaItemProvider.dispose();
		if (adagradItemProvider != null)
			adagradItemProvider.dispose();
		if (adamItemProvider != null)
			adamItemProvider.dispose();
		if (adamWItemProvider != null)
			adamWItemProvider.dispose();
		if (sparseAdamItemProvider != null)
			sparseAdamItemProvider.dispose();
		if (adamaxItemProvider != null)
			adamaxItemProvider.dispose();
		if (asgdItemProvider != null)
			asgdItemProvider.dispose();
		if (lbfgsItemProvider != null)
			lbfgsItemProvider.dispose();
		if (nAdamItemProvider != null)
			nAdamItemProvider.dispose();
		if (rAdamItemProvider != null)
			rAdamItemProvider.dispose();
		if (rmSpropItemProvider != null)
			rmSpropItemProvider.dispose();
		if (rpropItemProvider != null)
			rpropItemProvider.dispose();
		if (sgdItemProvider != null)
			sgdItemProvider.dispose();
		if (_LRSchedulerItemProvider != null)
			_LRSchedulerItemProvider.dispose();
		if (lambdaLRItemProvider != null)
			lambdaLRItemProvider.dispose();
		if (multiplicativeLRItemProvider != null)
			multiplicativeLRItemProvider.dispose();
		if (stepLRItemProvider != null)
			stepLRItemProvider.dispose();
		if (multiStepLRItemProvider != null)
			multiStepLRItemProvider.dispose();
		if (constantLRItemProvider != null)
			constantLRItemProvider.dispose();
		if (linearLRItemProvider != null)
			linearLRItemProvider.dispose();
		if (exponentialLRItemProvider != null)
			exponentialLRItemProvider.dispose();
		if (sequentialLRItemProvider != null)
			sequentialLRItemProvider.dispose();
		if (cosineAnnealingLRItemProvider != null)
			cosineAnnealingLRItemProvider.dispose();
		if (chainedSchedulerItemProvider != null)
			chainedSchedulerItemProvider.dispose();
		if (reduceLROnPlateauItemProvider != null)
			reduceLROnPlateauItemProvider.dispose();
		if (cyclicLRItemProvider != null)
			cyclicLRItemProvider.dispose();
		if (cosineAnnealingWarmRestartsItemProvider != null)
			cosineAnnealingWarmRestartsItemProvider.dispose();
		if (oneCycleLRItemProvider != null)
			oneCycleLRItemProvider.dispose();
	}

}
