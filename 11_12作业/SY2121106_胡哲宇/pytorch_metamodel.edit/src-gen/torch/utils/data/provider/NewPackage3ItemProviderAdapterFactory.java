/**
 */
package torch.utils.data.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import torch.utils.data.util.NewPackage3AdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class NewPackage3ItemProviderAdapterFactory extends NewPackage3AdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NewPackage3ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.DataLoader} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataLoaderItemProvider dataLoaderItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.DataLoader}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataLoaderAdapter() {
		if (dataLoaderItemProvider == null) {
			dataLoaderItemProvider = new DataLoaderItemProvider(this);
		}

		return dataLoaderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data._BaseDataLoaderIter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _BaseDataLoaderIterItemProvider _BaseDataLoaderIterItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data._BaseDataLoaderIter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_BaseDataLoaderIterAdapter() {
		if (_BaseDataLoaderIterItemProvider == null) {
			_BaseDataLoaderIterItemProvider = new _BaseDataLoaderIterItemProvider(this);
		}

		return _BaseDataLoaderIterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data._SingleProcessDataLoaderIter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _SingleProcessDataLoaderIterItemProvider _SingleProcessDataLoaderIterItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data._SingleProcessDataLoaderIter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_SingleProcessDataLoaderIterAdapter() {
		if (_SingleProcessDataLoaderIterItemProvider == null) {
			_SingleProcessDataLoaderIterItemProvider = new _SingleProcessDataLoaderIterItemProvider(this);
		}

		return _SingleProcessDataLoaderIterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data._MultiProcessingDataLoaderIter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected _MultiProcessingDataLoaderIterItemProvider _MultiProcessingDataLoaderIterItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data._MultiProcessingDataLoaderIter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter create_MultiProcessingDataLoaderIterAdapter() {
		if (_MultiProcessingDataLoaderIterItemProvider == null) {
			_MultiProcessingDataLoaderIterItemProvider = new _MultiProcessingDataLoaderIterItemProvider(this);
		}

		return _MultiProcessingDataLoaderIterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.Dataset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatasetItemProvider datasetItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.Dataset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatasetAdapter() {
		if (datasetItemProvider == null) {
			datasetItemProvider = new DatasetItemProvider(this);
		}

		return datasetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.IterableDataset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IterableDatasetItemProvider iterableDatasetItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.IterableDataset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIterableDatasetAdapter() {
		if (iterableDatasetItemProvider == null) {
			iterableDatasetItemProvider = new IterableDatasetItemProvider(this);
		}

		return iterableDatasetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.DFIterDataPipe} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DFIterDataPipeItemProvider dfIterDataPipeItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.DFIterDataPipe}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDFIterDataPipeAdapter() {
		if (dfIterDataPipeItemProvider == null) {
			dfIterDataPipeItemProvider = new DFIterDataPipeItemProvider(this);
		}

		return dfIterDataPipeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.TensorDataset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TensorDatasetItemProvider tensorDatasetItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.TensorDataset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTensorDatasetAdapter() {
		if (tensorDatasetItemProvider == null) {
			tensorDatasetItemProvider = new TensorDatasetItemProvider(this);
		}

		return tensorDatasetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.ConcatDataset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConcatDatasetItemProvider concatDatasetItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.ConcatDataset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConcatDatasetAdapter() {
		if (concatDatasetItemProvider == null) {
			concatDatasetItemProvider = new ConcatDatasetItemProvider(this);
		}

		return concatDatasetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.ChainDataset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChainDatasetItemProvider chainDatasetItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.ChainDataset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChainDatasetAdapter() {
		if (chainDatasetItemProvider == null) {
			chainDatasetItemProvider = new ChainDatasetItemProvider(this);
		}

		return chainDatasetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.Subset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubsetItemProvider subsetItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.Subset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubsetAdapter() {
		if (subsetItemProvider == null) {
			subsetItemProvider = new SubsetItemProvider(this);
		}

		return subsetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.Sampler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SamplerItemProvider samplerItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.Sampler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSamplerAdapter() {
		if (samplerItemProvider == null) {
			samplerItemProvider = new SamplerItemProvider(this);
		}

		return samplerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.SequentialSampler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequentialSamplerItemProvider sequentialSamplerItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.SequentialSampler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequentialSamplerAdapter() {
		if (sequentialSamplerItemProvider == null) {
			sequentialSamplerItemProvider = new SequentialSamplerItemProvider(this);
		}

		return sequentialSamplerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.RandomSampler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RandomSamplerItemProvider randomSamplerItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.RandomSampler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRandomSamplerAdapter() {
		if (randomSamplerItemProvider == null) {
			randomSamplerItemProvider = new RandomSamplerItemProvider(this);
		}

		return randomSamplerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.SubsetRandomSampler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubsetRandomSamplerItemProvider subsetRandomSamplerItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.SubsetRandomSampler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubsetRandomSamplerAdapter() {
		if (subsetRandomSamplerItemProvider == null) {
			subsetRandomSamplerItemProvider = new SubsetRandomSamplerItemProvider(this);
		}

		return subsetRandomSamplerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.WeightedRandomSampler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeightedRandomSamplerItemProvider weightedRandomSamplerItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.WeightedRandomSampler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeightedRandomSamplerAdapter() {
		if (weightedRandomSamplerItemProvider == null) {
			weightedRandomSamplerItemProvider = new WeightedRandomSamplerItemProvider(this);
		}

		return weightedRandomSamplerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.BatchSampler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BatchSamplerItemProvider batchSamplerItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.BatchSampler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBatchSamplerAdapter() {
		if (batchSamplerItemProvider == null) {
			batchSamplerItemProvider = new BatchSamplerItemProvider(this);
		}

		return batchSamplerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link torch.utils.data.DistributedSampler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistributedSamplerItemProvider distributedSamplerItemProvider;

	/**
	 * This creates an adapter for a {@link torch.utils.data.DistributedSampler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistributedSamplerAdapter() {
		if (distributedSamplerItemProvider == null) {
			distributedSamplerItemProvider = new DistributedSamplerItemProvider(this);
		}

		return distributedSamplerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dataLoaderItemProvider != null)
			dataLoaderItemProvider.dispose();
		if (_BaseDataLoaderIterItemProvider != null)
			_BaseDataLoaderIterItemProvider.dispose();
		if (_SingleProcessDataLoaderIterItemProvider != null)
			_SingleProcessDataLoaderIterItemProvider.dispose();
		if (_MultiProcessingDataLoaderIterItemProvider != null)
			_MultiProcessingDataLoaderIterItemProvider.dispose();
		if (datasetItemProvider != null)
			datasetItemProvider.dispose();
		if (iterableDatasetItemProvider != null)
			iterableDatasetItemProvider.dispose();
		if (dfIterDataPipeItemProvider != null)
			dfIterDataPipeItemProvider.dispose();
		if (tensorDatasetItemProvider != null)
			tensorDatasetItemProvider.dispose();
		if (concatDatasetItemProvider != null)
			concatDatasetItemProvider.dispose();
		if (chainDatasetItemProvider != null)
			chainDatasetItemProvider.dispose();
		if (subsetItemProvider != null)
			subsetItemProvider.dispose();
		if (samplerItemProvider != null)
			samplerItemProvider.dispose();
		if (sequentialSamplerItemProvider != null)
			sequentialSamplerItemProvider.dispose();
		if (randomSamplerItemProvider != null)
			randomSamplerItemProvider.dispose();
		if (subsetRandomSamplerItemProvider != null)
			subsetRandomSamplerItemProvider.dispose();
		if (weightedRandomSamplerItemProvider != null)
			weightedRandomSamplerItemProvider.dispose();
		if (batchSamplerItemProvider != null)
			batchSamplerItemProvider.dispose();
		if (distributedSamplerItemProvider != null)
			distributedSamplerItemProvider.dispose();
	}

}
