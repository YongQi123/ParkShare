
UseCaseModel ParkShare {

	UC::rentToDriver definedBySSD(RentToDriverSSD) relatedService(RentToDriverService)
	UC::rentFromOwner definedBySSD(RentFromOwnerSSD) relatedService(RentFromOwnerService)
	UC::searchParkingSpot definedBySSD(SearchParkingSpotSSD) relatedService(SearchParkingSpotService)
	UC::showAssets definedBySSD(ShowAssetsSSD) relatedService(ShowAssetsService)
	UC::register definedBySSD(RegisterSSD) relatedService(RegisterService)
	UC::loginn definedBySSD(LoginnSSD) relatedService(LoginnService)

	Actor ParkingSpotOwner
	extends User {
		rentToDriver
		showAssets
	}

	Actor ParkingAreaOwner extends User {
		rentToDriver
		showAssets
	}

	Actor Driver extends User {
		rentFromOwner
		searchParkingSpot
	}

	Actor User {
		register
		loginn
	}

	Interaction RentToDriverSSD {

		[Participants: ParkingSpotOwner ParkingAreaOwner RentToDriverService]

		CallMessage::RentToDriverSSDCallMessage1(uploadSpotInfo RentToDriverSSDCallMessage1SendingEnd -> RentToDriverSSDExecution1StartEnd)
		ReturnMessage::RentToDriverSSDCallMessage1Return(RentToDriverSSDExecution1FinishEnd -> RentToDriverSSDCallMessage1ReturnReceivingEnd RentToDriverSSDCallMessage1)
		CallMessage::RentToDriverSSDCallMessage3(uploadCertificate RentToDriverSSDCallMessage3SendingEnd -> RentToDriverSSDExecution2StartEnd)
		ReturnMessage::RentToDriverSSDCallMessage3Return(RentToDriverSSDExecution2FinishEnd -> RentToDriverSSDCallMessage3ReturnReceivingEnd RentToDriverSSDCallMessage3)
		CallMessage::RentToDriverSSDCallMessage5(confirmRegister RentToDriverSSDCallMessage5SendingEnd -> RentToDriverSSDExecution3StartEnd)
		ReturnMessage::RentToDriverSSDCallMessage5Return(RentToDriverSSDExecution3FinishEnd -> RentToDriverSSDCallMessage5ReturnReceivingEnd RentToDriverSSDCallMessage5)

		Execution::RentToDriverSSDExecution1(RentToDriverService RentToDriverSSDExecution1StartEnd RentToDriverSSDExecution1FinishEnd)
		Execution::RentToDriverSSDExecution2(RentToDriverService RentToDriverSSDExecution2StartEnd RentToDriverSSDExecution2FinishEnd)
		Execution::RentToDriverSSDExecution3(RentToDriverService RentToDriverSSDExecution3StartEnd RentToDriverSSDExecution3FinishEnd)

		MessageEnd::RentToDriverSSDCallMessage1SendingEnd(ParkingSpotOwner RentToDriverSSDCallMessage1)
		ExecutionEnd::RentToDriverSSDExecution1StartEnd(RentToDriverService RentToDriverSSDExecution1)
		ExecutionEnd::RentToDriverSSDExecution1FinishEnd(RentToDriverService RentToDriverSSDExecution1)
		MessageEnd::RentToDriverSSDCallMessage1ReturnReceivingEnd(ParkingSpotOwner RentToDriverSSDCallMessage1Return)
		MessageEnd::RentToDriverSSDCallMessage3SendingEnd(ParkingSpotOwner RentToDriverSSDCallMessage3)
		ExecutionEnd::RentToDriverSSDExecution2StartEnd(RentToDriverService RentToDriverSSDExecution2)
		ExecutionEnd::RentToDriverSSDExecution2FinishEnd(RentToDriverService RentToDriverSSDExecution2)
		MessageEnd::RentToDriverSSDCallMessage3ReturnReceivingEnd(ParkingSpotOwner RentToDriverSSDCallMessage3Return)
		MessageEnd::RentToDriverSSDCallMessage5SendingEnd(ParkingSpotOwner RentToDriverSSDCallMessage5)
		ExecutionEnd::RentToDriverSSDExecution3StartEnd(RentToDriverService RentToDriverSSDExecution3)
		ExecutionEnd::RentToDriverSSDExecution3FinishEnd(RentToDriverService RentToDriverSSDExecution3)
		MessageEnd::RentToDriverSSDCallMessage5ReturnReceivingEnd(ParkingSpotOwner RentToDriverSSDCallMessage5Return)

	}

	Interaction ShowAssetsSSD {

		[Participants: ParkingSpotOwner ParkingAreaOwner ShowAssetsService]

		CallMessage::ShowAssetsSSDCallMessage1(submitCheckRequest ShowAssetsSSDCallMessage1SendingEnd -> ShowAssetsSSDExecution1StartEnd)
		ReturnMessage::returnAssetsStatus(ShowAssetsSSDExecution1FinishEnd -> ShowAssetsSSDCallMessage1ReturnReceivingEnd ShowAssetsSSDCallMessage1)

		Execution::ShowAssetsSSDExecution1(ShowAssetsService ShowAssetsSSDExecution1StartEnd ShowAssetsSSDExecution1FinishEnd)

		MessageEnd::ShowAssetsSSDCallMessage1SendingEnd(ParkingSpotOwner ShowAssetsSSDCallMessage1)
		ExecutionEnd::ShowAssetsSSDExecution1StartEnd(ShowAssetsService ShowAssetsSSDExecution1)
		ExecutionEnd::ShowAssetsSSDExecution1FinishEnd(ShowAssetsService ShowAssetsSSDExecution1)
		MessageEnd::ShowAssetsSSDCallMessage1ReturnReceivingEnd(ParkingSpotOwner returnAssetsStatus)

	}

	Interaction SearchParkingSpotSSD {

		[Participants: Driver SearchParkingSpotService]

		CallMessage::SearchParkingSpotSSDCallMessage1(inputSearchKeywords SearchParkingSpotSSDCallMessage1SendingEnd -> SearchParkingSpotSSDExecution1StartEnd)
		ReturnMessage::returnSearchResults(SearchParkingSpotSSDExecution1FinishEnd -> SearchParkingSpotSSDCallMessage1ReturnReceivingEnd SearchParkingSpotSSDCallMessage1)
		CallMessage::SearchParkingSpotSSDCallMessage3(checkSpotDetails SearchParkingSpotSSDCallMessage3SendingEnd -> SearchParkingSpotSSDExecution2StartEnd)
		ReturnMessage::SearchParkingSpotSSDCallMessage3Return(SearchParkingSpotSSDExecution2FinishEnd -> SearchParkingSpotSSDCallMessage3ReturnReceivingEnd SearchParkingSpotSSDCallMessage3)

		Execution::SearchParkingSpotSSDExecution1(SearchParkingSpotService SearchParkingSpotSSDExecution1StartEnd SearchParkingSpotSSDExecution1FinishEnd)
		Execution::SearchParkingSpotSSDExecution2(SearchParkingSpotService SearchParkingSpotSSDExecution2StartEnd SearchParkingSpotSSDExecution2FinishEnd)

		MessageEnd::SearchParkingSpotSSDCallMessage1SendingEnd(Driver SearchParkingSpotSSDCallMessage1)
		ExecutionEnd::SearchParkingSpotSSDExecution1StartEnd(SearchParkingSpotService SearchParkingSpotSSDExecution1)
		ExecutionEnd::SearchParkingSpotSSDExecution1FinishEnd(SearchParkingSpotService SearchParkingSpotSSDExecution1)
		MessageEnd::SearchParkingSpotSSDCallMessage1ReturnReceivingEnd(Driver returnSearchResults)
		MessageEnd::SearchParkingSpotSSDCallMessage3SendingEnd(Driver SearchParkingSpotSSDCallMessage3)
		ExecutionEnd::SearchParkingSpotSSDExecution2StartEnd(SearchParkingSpotService SearchParkingSpotSSDExecution2)
		ExecutionEnd::SearchParkingSpotSSDExecution2FinishEnd(SearchParkingSpotService SearchParkingSpotSSDExecution2)
		MessageEnd::SearchParkingSpotSSDCallMessage3ReturnReceivingEnd(Driver SearchParkingSpotSSDCallMessage3Return)

	}

	Interaction RentFromOwnerSSD {

		[Participants: Driver RentFromOwnerService]

		CallMessage::RentFromOwnerSSDCallMessage1(selectSpot RentFromOwnerSSDCallMessage1SendingEnd -> RentFromOwnerSSDExecution1StartEnd)
		ReturnMessage::returnSpotInfo(RentFromOwnerSSDExecution1FinishEnd -> RentFromOwnerSSDCallMessage1ReturnReceivingEnd RentFromOwnerSSDCallMessage1)
		CallMessage::RentFromOwnerSSDCallMessage3(confirmRent RentFromOwnerSSDCallMessage3SendingEnd -> RentFromOwnerSSDExecution2StartEnd)
		ReturnMessage::returnRentStatus(RentFromOwnerSSDExecution2FinishEnd -> RentFromOwnerSSDCallMessage3ReturnReceivingEnd RentFromOwnerSSDCallMessage3)

		Execution::RentFromOwnerSSDExecution1(RentFromOwnerService RentFromOwnerSSDExecution1StartEnd RentFromOwnerSSDExecution1FinishEnd)
		Execution::RentFromOwnerSSDExecution2(RentFromOwnerService RentFromOwnerSSDExecution2StartEnd RentFromOwnerSSDExecution2FinishEnd)

		MessageEnd::RentFromOwnerSSDCallMessage1SendingEnd(Driver RentFromOwnerSSDCallMessage1)
		ExecutionEnd::RentFromOwnerSSDExecution1StartEnd(RentFromOwnerService RentFromOwnerSSDExecution1)
		ExecutionEnd::RentFromOwnerSSDExecution1FinishEnd(RentFromOwnerService RentFromOwnerSSDExecution1)
		MessageEnd::RentFromOwnerSSDCallMessage1ReturnReceivingEnd(Driver returnSpotInfo)
		MessageEnd::RentFromOwnerSSDCallMessage3SendingEnd(Driver RentFromOwnerSSDCallMessage3)
		ExecutionEnd::RentFromOwnerSSDExecution2StartEnd(RentFromOwnerService RentFromOwnerSSDExecution2)
		ExecutionEnd::RentFromOwnerSSDExecution2FinishEnd(RentFromOwnerService RentFromOwnerSSDExecution2)
		MessageEnd::RentFromOwnerSSDCallMessage3ReturnReceivingEnd(Driver returnRentStatus)

	}

	Interaction RegisterSSD {

		[Participants: User RegisterService]

		CallMessage::RegisterSSDCallMessage1(register RegisterSSDCallMessage1SendingEnd -> RegisterSSDExecution1StartEnd)
		ReturnMessage::RegisterSSDCallMessage1Return(RegisterSSDExecution1FinishEnd -> RegisterSSDCallMessage1ReturnReceivingEnd RegisterSSDCallMessage1)

		Execution::RegisterSSDExecution1(RegisterService RegisterSSDExecution1StartEnd RegisterSSDExecution1FinishEnd)

		MessageEnd::RegisterSSDCallMessage1SendingEnd(User RegisterSSDCallMessage1)
		ExecutionEnd::RegisterSSDExecution1StartEnd(RegisterService RegisterSSDExecution1)
		ExecutionEnd::RegisterSSDExecution1FinishEnd(RegisterService RegisterSSDExecution1)
		MessageEnd::RegisterSSDCallMessage1ReturnReceivingEnd(User RegisterSSDCallMessage1Return)

	}

	Interaction LoginnSSD {

		[Participants: User LoginnService]

	}

	Service ParkShareSystem {

	}

	Service ThirdPartyServices {

	}

	Service RentToDriverService {

		[Operation]
		uploadSpotInfo()
		registerSpot()
		uploadCertificate()
		confirmRegister()

	}

	Service ShowAssetsService {

		[Operation]
		submitCheckRequest()

	}

	Service SearchParkingSpotService {

		[Operation]
		inputSearchKeywords(keywords,driver)
		checkSpotDetails()

	}

	Service RentFromOwnerService {

		[Operation]
		selectSpot()
		confirmRent()

	}

	Service LoginService {

		[Operation]
		inputLoginInfo(username, password)

	}

	Service RegisterService {

		[Operation]
		register(username, password, tel)

	}

	Service LoginnService {

	}

	// by Duan yuning
	Contract RegisterService::register(username:String, password:String, tel:String) : String {

		/* precondition: skeleton */
		precondition:
			true

		/* postcondition: skeleton */
		postcondition:
			if
				// ·ñ¶¨²Ù×÷·û£¿
				User.allInstance()->exists(c:User | c.Username = username)
			then
				result = false

			else
				// Create new Object
				let new:User in
				new.oclIsNew() and
				new.Username = username and
				new.Password = password and
				new.tel = tel and
				User.allInstance()->includes(new) and
				result = ture
			endif
	}

	Contract SearchParkingSpotService::inputSearchKeywords(keywords :String, driver:Driver) : String {

		/* definition skeleton */
		definition:
			ps:ParkingSpot = ParkingSpot.allInstance()->select(c:ParkingSpot | c.Labels = keywords)

		/* precondition: skeleton */
		precondition:
			driver.IsLogin = true

		/* postcondition: skeleton */
		postcondition:
			if
				(driver.IsRent = false)
			then
				self.SearchContent = ps and
				result = true and
				self.isSearched = true
			else
				result = false
			endif
	}

	Contract SearchParkingSpotService::checkSpotDetails() : String {

		/* precondition: skeleton */
		precondition:
			self.isSearched = true

		/* postcondition: skeleton */
		postcondition:
			if
				self.SearchContent.Status = EMPTY
			then
				result = self.SearchContent
			else
				result = false
			endif
	}

}

DomainModel ParkShare {

	Entity ParkingSpotOwner extends User {
		[Refer]
		ParkingSpotOwnertoParkingSpot : ParkingSpot* ! Association
	}

	Entity ParkingAreaOwner extends User {
		[Refer]
		ParkingAreaOwnertoParkingSpot : ParkingSpot* Association
	}

	Entity Driver extends User {
		IsRent : Boolean

		[Refer]
		DrivertoRentRecord : RentRecord* Association
		DrivertoFineRecord : FineRecord* Association
	}

	Entity ParkingSpot {
		Owner : String
		RegisterDate : Date
		Status : ParkingSpotStatus[EMPTY|USING|OVERTIME]
		Price : Real
		ServiceStartTime : Date
		ServiceEndTime : Date
		Income : Real
		Address : String
		Longitude : String
		Latitude : String
		Labels : String

		[Refer]
		ParkingSpottoParkingSpotOwner : ParkingSpotOwner Association
		ParkingSpottoParkingAreaOwner : ParkingAreaOwner ! Association
		ParkingSpottoRentRecord : RentRecord* Association
	}

	@AutoCRUD Entity User {
		ID : String
		Username : String
		Password : String
		Telephone : String
		IsLogin : Boolean
	}

	Entity RentRecord {
		Driver : String
		ParkingSpot : String
		BookStartTime : Date
		BookEndTime : Date
		RentStartTime : Date
		RentEndTime : Date
		Cost : Real
		ID : String

		[Refer]
		RentRecordtoDriver : Driver ! Association
		RentRecordtoParkingSpot : ParkingSpot ! Association
	}

	Entity FineRecord {
		Driver : String
		RentRecord : String
		Money : Real
		FineDate : Date

		[Refer]
		FineRecordtoDriver : Driver ! Association
		FineRecordtoRentRecord : RentRecord Association
	}

}

