/**
 */
package ooad.pytorch.provider;

import java.util.ArrayList;
import java.util.Collection;

import ooad.pytorch.util.PytorchAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PytorchItemProviderAdapterFactory extends PytorchAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PytorchItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.NeuralNetwork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeuralNetworkItemProvider neuralNetworkItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.NeuralNetwork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeuralNetworkAdapter() {
		if (neuralNetworkItemProvider == null) {
			neuralNetworkItemProvider = new NeuralNetworkItemProvider(this);
		}

		return neuralNetworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.Identity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentityItemProvider identityItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.Identity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentityAdapter() {
		if (identityItemProvider == null) {
			identityItemProvider = new IdentityItemProvider(this);
		}

		return identityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.Linear} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinearItemProvider linearItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.Linear}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinearAdapter() {
		if (linearItemProvider == null) {
			linearItemProvider = new LinearItemProvider(this);
		}

		return linearItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.Bilinear} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BilinearItemProvider bilinearItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.Bilinear}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBilinearAdapter() {
		if (bilinearItemProvider == null) {
			bilinearItemProvider = new BilinearItemProvider(this);
		}

		return bilinearItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.Conv1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Conv1dItemProvider conv1dItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.Conv1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConv1dAdapter() {
		if (conv1dItemProvider == null) {
			conv1dItemProvider = new Conv1dItemProvider(this);
		}

		return conv1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.Conv2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Conv2dItemProvider conv2dItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.Conv2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConv2dAdapter() {
		if (conv2dItemProvider == null) {
			conv2dItemProvider = new Conv2dItemProvider(this);
		}

		return conv2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.Conv3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Conv3dItemProvider conv3dItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.Conv3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConv3dAdapter() {
		if (conv3dItemProvider == null) {
			conv3dItemProvider = new Conv3dItemProvider(this);
		}

		return conv3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.MaxPool1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxPool1dItemProvider maxPool1dItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.MaxPool1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxPool1dAdapter() {
		if (maxPool1dItemProvider == null) {
			maxPool1dItemProvider = new MaxPool1dItemProvider(this);
		}

		return maxPool1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.MaxPool2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxPool2dItemProvider maxPool2dItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.MaxPool2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxPool2dAdapter() {
		if (maxPool2dItemProvider == null) {
			maxPool2dItemProvider = new MaxPool2dItemProvider(this);
		}

		return maxPool2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.MaxPool3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxPool3dItemProvider maxPool3dItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.MaxPool3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxPool3dAdapter() {
		if (maxPool3dItemProvider == null) {
			maxPool3dItemProvider = new MaxPool3dItemProvider(this);
		}

		return maxPool3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.AvgPool1d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvgPool1dItemProvider avgPool1dItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.AvgPool1d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvgPool1dAdapter() {
		if (avgPool1dItemProvider == null) {
			avgPool1dItemProvider = new AvgPool1dItemProvider(this);
		}

		return avgPool1dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.AvgPool2d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvgPool2dItemProvider avgPool2dItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.AvgPool2d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvgPool2dAdapter() {
		if (avgPool2dItemProvider == null) {
			avgPool2dItemProvider = new AvgPool2dItemProvider(this);
		}

		return avgPool2dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.AvgPool3d} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvgPool3dItemProvider avgPool3dItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.AvgPool3d}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvgPool3dAdapter() {
		if (avgPool3dItemProvider == null) {
			avgPool3dItemProvider = new AvgPool3dItemProvider(this);
		}

		return avgPool3dItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.Sigmoid} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SigmoidItemProvider sigmoidItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.Sigmoid}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSigmoidAdapter() {
		if (sigmoidItemProvider == null) {
			sigmoidItemProvider = new SigmoidItemProvider(this);
		}

		return sigmoidItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.ReLU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReLUItemProvider reLUItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.ReLU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReLUAdapter() {
		if (reLUItemProvider == null) {
			reLUItemProvider = new ReLUItemProvider(this);
		}

		return reLUItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.LeakyReLU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeakyReLUItemProvider leakyReLUItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.LeakyReLU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeakyReLUAdapter() {
		if (leakyReLUItemProvider == null) {
			leakyReLUItemProvider = new LeakyReLUItemProvider(this);
		}

		return leakyReLUItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ooad.pytorch.Softmax} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftmaxItemProvider softmaxItemProvider;

	/**
	 * This creates an adapter for a {@link ooad.pytorch.Softmax}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftmaxAdapter() {
		if (softmaxItemProvider == null) {
			softmaxItemProvider = new SoftmaxItemProvider(this);
		}

		return softmaxItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (neuralNetworkItemProvider != null)
			neuralNetworkItemProvider.dispose();
		if (identityItemProvider != null)
			identityItemProvider.dispose();
		if (linearItemProvider != null)
			linearItemProvider.dispose();
		if (bilinearItemProvider != null)
			bilinearItemProvider.dispose();
		if (conv1dItemProvider != null)
			conv1dItemProvider.dispose();
		if (conv2dItemProvider != null)
			conv2dItemProvider.dispose();
		if (conv3dItemProvider != null)
			conv3dItemProvider.dispose();
		if (maxPool1dItemProvider != null)
			maxPool1dItemProvider.dispose();
		if (maxPool2dItemProvider != null)
			maxPool2dItemProvider.dispose();
		if (maxPool3dItemProvider != null)
			maxPool3dItemProvider.dispose();
		if (avgPool1dItemProvider != null)
			avgPool1dItemProvider.dispose();
		if (avgPool2dItemProvider != null)
			avgPool2dItemProvider.dispose();
		if (avgPool3dItemProvider != null)
			avgPool3dItemProvider.dispose();
		if (sigmoidItemProvider != null)
			sigmoidItemProvider.dispose();
		if (reLUItemProvider != null)
			reLUItemProvider.dispose();
		if (leakyReLUItemProvider != null)
			leakyReLUItemProvider.dispose();
		if (softmaxItemProvider != null)
			softmaxItemProvider.dispose();
	}

}
